"""
Django settings for superlists project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'jk9ep9d0eau6j31(6k-7$1#)w&7ud6i(^ntuwf2-er80phcw_g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# The list of host/domain names that this site can serve
# (To protect against HTTP Host header attacks)
ALLOWED_HOSTS = ['localhost', '.koumparossoftware.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'lists',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'superlists.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'superlists.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
'''ASK 20181106
Note that there are three constants to handle static file locations
(see the Django docs for more details, and also the following S.O. entry:
https://stackoverflow.com/questions/24022558/differences-between-staticfiles    -dir-static-root-and-media-root
).
Simply put, the three locations have the following characteristics:
`STATIC_URL`       - this describes the URL prefix for referring to those
                     static files that will be located in `STATIC_ROOT`.
                     Examples:
                     "/static/" or
                     "http://static.thissite.com/"
`STATICFILES_DIRS` - this is a list of other (app_name/static is provided
                     by default) folders where static files can be found
                     (typically project-level files)
`STATIC_ROOT`      - this is the folder where static files should be
                     served once the project is deployed.
                     The `collectstatic` command copies files from all
                     other registered static folders into this folder
                     to provide a single location from which something like
                     Apache or NGINX can serve the files.
                     NOTE: this cannot be the same folder as one in the
                     STATICFILES_DIRS list. In the Django documentation
                     STATIC_ROOT is not even in the Django project folder
                     hierarchy (they use `/var/www/example.com/static` in
                     their example).
                     For now, we'll leave this blank and we'll choose a 
                     directory once we get to deployment.
'''
STATIC_URL = '/static/'
